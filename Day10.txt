*********Merge Sort**********
mergeSort(arr,l,r){
    if(l<r)
    {
	int mid=(l+r)/2;
	mergeSort(arr,l,mid);
	mergeSort(l,mid+1,r);
	merge(a,l,mid,r);
	}
}
********Bubble Sort**********
package com.oops;

public class BubbleSort {
	void bubblesort(int arr[]) {
		int n=arr.length;
		for(int i=0;i<n-1;i++) {
			for(int j=0;j<n-i-1;j++) {
				if(arr[j]>arr[j+1]) {
					int temp=arr[j];
					arr[j]=arr[j+1];
					arr[j+1]=temp;
				}
			}
		}
	}
	void print(int arr[]) {
		int n=arr.length;
		for(int i=0;i<n;i++) {
			System.out.println(arr[i] +" ");
		}
		//System.out.println();
	}

	public static void main(String[] args) {
		BubbleSort b=new BubbleSort();
		int arr[]= {23,5,46,75,20,51,87,4};
		b.bubblesort(arr);
		System.out.println("Sorted array");
		b.print(arr);
		// TODO Auto-generated method stub

	}

}
**********Quick Sort**********
Step 1 − Choose the highest index value has pivot
Step 2 − Take two variables to point left and right of the list excluding pivot
Step 3 − left points to the low index
Step 4 − right points to the high
Step 5 − while value at left is less than pivot move right
Step 6 − while value at right is greater than pivot move left
Step 7 − if both step 5 and step 6 does not match swap left and right
Step 8 − if left ≥ right, the point where they met is new pivot